import java.io.FileOutputStream
import java.io.OutputStreamWriter

plugins {
    //    id 'java'
    /**
     * 使用 'java-library' 代替 'java'，功能更健全
     */
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
jar {
    //archiveFileName = rootProject.name+'.jar'
    // 标志主类
    manifest.attributes 'Main-Class': 'com.mhy.appupdate.JavaFXBootstrap'
}

repositories {
    mavenCentral()
}
mainClassName = 'com.mhy.appupdate.JavaFXBootstrap'

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.mhy.appupdate'
    mainClass = 'com.mhy.appupdate.JavaFXBootstrap'
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

Properties properties = new Properties()
properties.load(new FileInputStream('gradle.properties'))
def GROUP_NAME = properties.getProperty('GROUP_NAME')
def mVersion = properties.getProperty("VERSION_NAME");
//版本
group GROUP_NAME
version mVersion

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.0')
//  获取apk的包名、版本名、版本号、图标等信息
    implementation 'net.dongliu:apk-parser:2.5.3'
//    json解析库 https://github.com/alibaba/fastjson2
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.52'
    //md5
    //implementation 'commons-codec:commons-codec:1.17.1'

}
// 写文件
// outputFile 指定输出文件的路径
// content 文本内容
static void createScript(File outputFile, String content) {
    // 创建文件所在目录（如果不存在）
    outputFile.parentFile.mkdirs()
    // 写入文件内容
    FileOutputStream fos = new FileOutputStream(outputFile)
    OutputStreamWriter osw = new OutputStreamWriter(fos)
    content += "\n# The current time is: ${new Date()}"
    // 写入文件
    osw.write(content)
    osw.flush()
    osw.close()
    fos.close()
}
//创建运行脚本
task createTextFile(type: DefaultTask) {
    doLast {
        // 文本内容
        String content = """
@echo off
# 获取当前执行脚本的目录
set jarPath=%~dp0
# 使用 javaw 启动一个jar
start java -jar %jarPath%""" + rootProject.name + """-""" + mVersion + """-all.jar
"""
        // 指定输出文件的路径
        File outputFile = file("out/libs/WinStart.bat")
        createScript(outputFile, content)
        String content2 = """
@echo off
# 设置要终止的java 程序名称(通常是jar包名称)
set appName=""" + rootProject.name + """-""" + mVersion + """-all.jar
# 通过 jps 命令找到相关 jar 程序的进程 id
for /F %%i in ('jps ^| findstr %appName%') do (set p=%%i)
# 终止找到的进程id
taskkill /f /pid %p%
# 打印信息
echo 'kill %appName%'
"""
        // 指定输出文件的路径
        File outputFile2 = file("out/libs/WinStop.bat")
        createScript(outputFile2, content2)

        String contentMac = """
#!/bin/bash
echo "如果没有权限，chmod +x MacStart.sh"
# 检查 Java 是否安装
if ! command -v java &>/dev/null; then
  echo "Java is not installed. Please install Java and try again."
  exit
fi

# 指定 Java 命令
java -jar """ + rootProject.name + """-""" + mVersion + """-all.jar
"""
        File outMac = file("out/libs/MacStart.sh")
        createScript(outMac, contentMac)
    }
}
/**
 * 删除使用产出的补丁和清单
 */
task clearOut(type: Delete) {
    delete('out/libs/out')
}
//打完压缩包可以删除libs了
task clearLib(type: Delete) {
    delete('out/libs')
}

//压缩文件
task compressToZip(type: Zip, dependsOn: ['clearOut']) {
    // 指定输出ZIP文件的名称
    archiveFileName = rootProject.name + '-' + mVersion + '.zip'
    // 指定ZIP文件存放的目录
    destinationDir = file('out')
    // 添加要压缩的文件或目录
    from 'out/libs'
}
/**这个命令全包了
 * 将编译包导出，发布
 */
task sources2Jar(type: Copy, dependsOn: ['shadowJar', 'createTextFile']) {
    from('build/libs/')
    into('out/libs')
    File config = new File("config.json")
    if (!config.exists()) {
        //已存在就不拷贝了
        from('config.json')
        into('out/libs')
    }
    File[] listFiles = new File('out/libs/diff').listFiles();
    if (listFiles != null && listFiles.length > 0) {
        //文件夹下有文件
    } else {
        //文件夹下没有文件
        println '复制diff'
        from('diff')
        into('out/libs/diff')
    }
}
//执行完自动执行下一个打压缩包
sources2Jar.finalizedBy(compressToZip, clearLib)